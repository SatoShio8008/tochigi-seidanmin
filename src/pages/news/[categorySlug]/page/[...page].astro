---
import type { GetStaticPathsOptions } from "astro";
import BaseLayout from "../../../../layouts/BaseLayout.astro";
import { newtClient } from "../../../../lib/newt";
import type { Article } from "../../../../lib/newt";
import type { Category } from "../../../../lib/newt";
import CategoryList from "../../../../components/CategoryList.astro";
import Pagination from "../../../../components/Pagination.astro";
import ButtonLink from "../../../../components/ButtonLink.astro";
import { formatDate } from "../../../../lib/utils";

export async function getCategories() {
  // 全カテゴリーを取得
  const { items: categories } = await newtClient.getContents<Category>({
    appUid: "news",
    modelUid: "category",
    query: {
      select: ["categorySlug"], // カテゴリーのIDを取得
    },
  });

  // 必要に応じて、一意なカテゴリーIDを返す
  return categories;
}

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allCategorySlugs = await getCategories(); // カテゴリーのスラッグ一覧を取得
  const mappedCategorySlug = allCategorySlugs.map((item) => item.categorySlug);
  // 投稿一覧を取得
  const { items: allPosts } = await newtClient.getContents<Article>({
    appUid: "news",
    modelUid: "article",
    query: {
      select: ["title", "slug", "coverImage", "date", "category"],
    },
  });

  return mappedCategorySlug.flatMap((categorySlug) => {
    const filteredPosts = allPosts.filter(
      (post) => post.category.categorySlug === categorySlug
    );

    // 各投稿のcategory.nameをpropsに渡す
    const categoryNames = [
      ...new Set(filteredPosts.map((post) => post.category.name)),
    ];

    return paginate(filteredPosts, {
      params: { categorySlug },
      props: { categoryNames },
      pageSize: 10,
    });
  });
}

const { page } = Astro.props;
const { categoryNames } = Astro.props;
const { categorySlug } = Astro.params;
const pageTitle = categoryNames;
const title = categoryNames;
const subTitle = "News";
const description = "とちぎ星団民の会のカテゴリー別記事一覧です";
---

<BaseLayout
  pageTitle={`page ${page.currentPage} | ${pageTitle}`}
  title={`カテゴリー:「${title}」一覧`}
  subTitle={subTitle}
  description={description}
>
  <section id="news">
    <div class="wrapper">
      <h2>{`News:${title}一覧`}</h2>
      <CategoryList />
      <div>
        {
          page.data.map((postsData) => {
            return (
              <li class="list">
                <a href={`/news/${postsData.slug}`} class="link">
                  <img
                    src={postsData.coverImage.src}
                    alt=""
                    class="newsImage"
                  />
                </a>
                <dl class="newsContent">
                  <dt class="newsTitle">
                    <a href={`/news/${postsData.slug}`}>{postsData.title}</a>
                  </dt>
                  <dd class="newsMeta">
                    <p>{postsData.category.name}</p>
                    <p>{formatDate(postsData.date)}</p>
                  </dd>
                </dl>
              </li>
            );
          })
        }
      </div>
      <Pagination page={page} name=`news/${categorySlug}/page/` />
      <div class="ButtonLink">
        <ButtonLink href="../page" label="Newsへ戻る" />
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  /* 基本スタイル（小さい画面向け） */
  section {
    padding-top: 80px;
    padding-bottom: 100px;
  }
  h2 {
    font-size: 3rem;
  }
  #news {
    background-image: linear-gradient(var(--light-blue), var(--blue));
    padding: 7rem 0;
    -webkit-clip-path: polygon(0 7%, 100% 15%, 100% 90%, 0 96%);
    clip-path: polygon(0 7%, 100% 15%, 100% 90%, 0 96%);
  }
  .list {
    display: flex;
    flex-direction: column;
    gap: 20px;
    padding: 16px 0;
    border-bottom: 1px solid var(--white);
    list-style: none;
  }

  .list:last-child {
    border-bottom: none;
  }

  .link {
    display: block;
  }

  .newsImage {
    display: none; /* 小さい画面では画像を非表示 */
  }

  .newsTitle {
    font-size: 1rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
  }

  .newsMeta {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .ButtonLink {
    margin-top: 2rem;
  }

  /* 大きい画面（600px以上）向けのスタイル */
  @media (min-width: 600px) {
    .list {
      flex-direction: row;
      align-items: flex-start;
      gap: 40px;
      padding: 24px 0;
    }

    .newsImage {
      display: block; /* 大きい画面では画像を表示 */
      width: 200px;
      height: auto;
      object-fit: cover;
    }

    .newsTitle {
      font-size: 1.1rem;
    }

    .newsMeta {
      gap: 16px;
    }
  }
</style>
